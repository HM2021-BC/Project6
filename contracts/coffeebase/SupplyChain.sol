pragma solidity ^0.5.0;

import "../coffeecore/Ownable.sol";
import "../coffeeaccesscontrol/ProducerRole.sol";
import "../coffeeaccesscontrol/DistributorRole.sol";
import "../coffeeaccesscontrol/RetailerRole.sol";
import "../coffeeaccesscontrol/ConsumerRole.sol";

// Define a contract 'Supplychain'
contract SupplyChain is Ownable, ProducerRole, DistributorRole, RetailerRole, ConsumerRole {
  // Define 'owner'
  address payable owner;

  // Define a variable called 'upc' for Universal Product Code (UPC)
  uint  upc;

  // Define a variable called 'sku' for Stock Keeping Unit (SKU)
  uint  sku;

  // Define a public mapping 'items' that maps the UPC to an Item.
  mapping (uint => Item) items;

  // Define enum 'State' with the following values:
  enum State
  {
    Registered,  // 0
    Processed,  // 1
    Packed,     // 2
    ForSale,    // 3
    Sold,       // 4
    Shipped,    // 5
    Received,   // 6
    Purchased   // 7
  }

  State constant defaultState = State.Registered;

  // Define a struct 'Item' with the following fields:
  struct Item {
    uint    sku;  // Stock Keeping Unit (SKU)
    uint    upc; // Universal Product Code (UPC), generated by the Farmer, goes on the package, can be verified by the Consumer
    address ownerID;  // Metamask-Ethereum address of the current owner as the product moves through 8 stages
    address payable originProducerID; // Metamask-Ethereum address of the Farmer
    string  originProducerName; // Farmer Name
    string  originFactoryInformation;  // Farmer Information
    string  originFactoryLocation; // Farm Location_originFactoryLocation
    string  originFactoryHousenumber;  // Farm Housenumber
    uint    productID;  // Product ID potentially a combination of upc + sku
    string  productNotes; // Product Notes
    uint    productPrice; // Product Price
    State   itemState;  // Product State as represented in the enum above
    address payable distributorID;  // Metamask-Ethereum address of the Distributor
    address retailerID; // Metamask-Ethereum address of the Retailer
    address payable consumerID; // Metamask-Ethereum address of the Consumer
  }

  // Define 8 events with the same 8 state values and accept 'upc' as input argument
  event Registered(uint upc);
  event Processed(uint upc);
  event Packed(uint upc);
  event ForSale(uint upc);
  event Sold(uint upc);
  event Shipped(uint upc);
  event Received(uint upc);
  event Purchased(uint upc);

  // Define a modifer that checks to see if msg.sender == owner of the contract
  modifier onlyOwner() {
    require(msg.sender == owner, "Sender is not the owner of the contract");
    _;
  }

  // Define a modifer that verifies the Caller
  modifier verifyCaller (address _address) {
    require(msg.sender == _address, "Caller not verified");
    _;
  }

  // Define a modifier that checks if the paid amount is sufficient to cover the price
  modifier paidEnough(uint _price) {
    require(msg.value >= _price, "Did not pay enough");
    _;
  }

  // Define a modifier that checks if an item.state of a upc is registered
  modifier registered(uint _upc) {
    require(items[_upc].itemState == State.Registered, "The product must be registered before calling");
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Processed
  modifier processed(uint _upc) {
    require(items[_upc].itemState == State.Processed, "Item must be processed before calling");
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Packed
  modifier packed(uint _upc) {
    require(items[_upc].itemState == State.Packed, "Item must be packed before calling");
    _;
  }

  // Define a modifier that checks if an item.state of a upc is ForSale
  modifier forSale(uint _upc) {
    require(items[_upc].itemState == State.ForSale, "Item must be for sale before calling");
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Sold
  modifier sold(uint _upc) {
    require(items[_upc].itemState == State.Sold, "Item must be sold before calling");
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Shipped
  modifier shipped(uint _upc) {
    require(items[_upc].itemState == State.Shipped, "Item must be shipped before calling");
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Received
  modifier received(uint _upc) {
    require(items[_upc].itemState == State.Received, "Item must be received before calling");
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Purchased
  modifier purchased(uint _upc) {
    require(items[_upc].itemState == State.Purchased, "Item must be purchased before calling");
    _;
  }

  // In the constructor set 'owner' to the address that instantiated the contract
  // and set 'sku' to 1
  // and set 'upc' to 1
  constructor() public payable {
    owner = getOwner();
    sku = 1;
    upc = 1;
  }

  // Define a function 'kill' if required
  function kill() public {
    if (msg.sender == owner) {
      selfdestruct(owner);
    }
  }

  // Define a function 'registerItem' that allows a farmer to mark an item 'registered'
  function registerItem
  (
    uint _upc,
    address payable _originProducerID,
    string memory _originProducerName,
    string memory _originFactoryInformation,
    string memory _originFactoryLocation,
    string memory _originFactoryHousenumber,
    string memory _productNotes
  ) public
  //Only a farmer can call this funciton
  onlyProducer()
  {
    // Add the new item as part of register
    items[_upc] = Item(
      sku,
      _upc,
      msg.sender,
      _originProducerID,
      _originProducerName,
      _originFactoryInformation,
      _originFactoryLocation,
      _originFactoryHousenumber,
      sku + upc,
      _productNotes,
      1,
      State.Registered,
      address(0),
      address(0),
      address(0)
    );
    // Increment sku
    sku = sku + 1;
    // Emit the appropriate event
    emit Registered(_upc);
  }

  // Define a function 'processtItem' that allows a farmer to mark an item 'Processed'
  function processItem(uint _upc) public
  //Only a farmer can call this function
  onlyProducer()
  // Call modifier to check if upc has passed previous supply chain stage
  registered(_upc)
  // Call modifier to verify caller of this function
  verifyCaller(items[_upc].originProducerID)
  {
    // Update the appropriate fields
    items[_upc].itemState = State.Processed;

    // Emit the appropriate event
    emit Processed(_upc);
  }

  // Define a function 'packItem' that allows a farmer to mark an item 'Packed'
  function packItem(uint _upc) public
  //Only a farmer can call this function
  onlyProducer()
  // Call modifier to check if upc has passed previous supply chain stage
  processed(_upc)
  // Call modifier to verify caller of this function
  verifyCaller(items[_upc].originProducerID)
  {
    // Update the appropriate fields
    items[_upc].itemState = State.Packed;
    // Emit the appropriate event
    emit Packed(_upc);
  }

  // Define a function 'sellItem' that allows a farmer to mark an item 'ForSale'
  function sellItem(uint _upc, uint _price) public
  //Only a farmer can call this function
  onlyProducer()
  // Call modifier to check if upc has passed previous supply chain stage
  packed(_upc)
  // Call modifier to verify caller of this function
  verifyCaller(items[_upc].originProducerID)
  {
    // Update the appropriate fields
    items[_upc].itemState = State.ForSale;
    items[_upc].productPrice = _price;
    // Emit the appropriate event
    emit ForSale(_upc);
  }

  // Define a function 'buyItem' that allows the disributor to mark an item 'Sold'
  // Use the above defined modifiers to check if the item is available for sale, if the buyer has paid enough,
  // and any excess ether sent is refunded back to the buyer
  function buyItem(uint _upc) public payable
  //Only a distributor can call this function
  onlyDistributor()
  // Call modifier to check if upc has passed previous supply chain stage
  forSale(_upc)
  {
    // Update the appropriate fields - ownerID, distributorID, itemState
    items[_upc].ownerID = msg.sender;
    items[_upc].distributorID = msg.sender;
    items[_upc].itemState = State.Sold;
    // Transfer money to farmer
    items[_upc].originProducerID.transfer(msg.value);
    // emit the appropriate event
    emit Sold(_upc);
  }

  // Define a function 'shipItem' that allows the distributor to mark an item 'Shipped'
  // Use the above modifers to check if the item is sold
  function shipItem(uint _upc) public
    //Only a farmer can call this funciton
    onlyProducer()
    // Call modifier to check if upc has passed previous supply chain stage
    sold(_upc)
    // Call modifier to verify caller of this function
    verifyCaller(items[_upc].originProducerID)
  {
    // Update the appropriate fields
    items[_upc].itemState = State.Shipped;
    // Emit the appropriate event
    emit Shipped(_upc);
  }

  // Define a function 'receiveItem' that allows the retailer to mark an item 'Received'
  // Use the above modifiers to check if the item is shipped
  function receiveItem(uint _upc) public
    //Only a retailer can call this function
    onlyRetailer()
    // Call modifier to check if upc has passed previous supply chain stage
    shipped(_upc)
    // Access Control List enforced by calling Smart Contract / DApp
  {
    // Update the appropriate fields - ownerID, retailerID, itemState
    items[_upc].ownerID = msg.sender;
    items[_upc].retailerID = msg.sender;
    items[_upc].itemState = State.Received;
    // Emit the appropriate event
    emit Received(_upc);
  }

  // Define a function 'purchaseItem' that allows the consumer to mark an item 'Purchased'
  // Use the above modifiers to check if the item is received
  function purchaseItem(uint _upc) public
    //Only a consumer can call this function
    onlyConsumer()
    // Call modifier to check if upc has passed previous supply chain stage
    received(_upc)
    // Access Control List enforced by calling Smart Contract / DApp
  {
    // Update the appropriate fields - ownerID, consumerID, itemState
    items[_upc].ownerID = msg.sender;
    items[_upc].consumerID = msg.sender;
    items[_upc].itemState = State.Purchased;
    // Emit the appropriate event
    emit Purchased(_upc);
  }

  // Define a function 'fetchItemBufferOne' that fetches the data
  function fetchItemBufferOne(uint _upc) public view returns
  (
    uint    itemSKU,
    uint    itemUPC,
    address ownerID,
    address originProducerID,
    string memory originProducerName,
    string memory originFactoryInformation,
    string memory originFactoryLocation,
    string memory originFactoryHousenumber
  )
  {
  // Assign values to the 8 parameters
    Item memory item = items[_upc];
    itemSKU = item.sku;
    itemUPC = item.upc;
    ownerID = item.ownerID;
    originProducerID = item.originProducerID;
    originProducerName = item.originProducerName;
    originFactoryInformation = item.originFactoryInformation;
    originFactoryLocation = item.originFactoryLocation;
    originFactoryHousenumber = item.originFactoryHousenumber;

    return
    (
      itemSKU,
      itemUPC,
      ownerID,
      originProducerID,
      originProducerName,
      originFactoryInformation,
      originFactoryLocation,
      originFactoryHousenumber
    );
  }

  // Define a function 'fetchItemBufferTwo' that fetches the data
  function fetchItemBufferTwo(uint _upc) public view returns
  (
    uint    itemSKU,
    uint    itemUPC,
    uint    productID,
    string memory productNotes,
    uint    productPrice,
    State    itemState,
    address distributorID,
    address retailerID,
    address consumerID
  )
  {
    // Assign values to the 9 parameters
    Item memory item = items[_upc];
    itemSKU = item.sku;
    itemUPC = item.upc;
    productID = item.productID;
    productNotes = item.productNotes;
    productPrice = item.productPrice;
    itemState = item.itemState;
    distributorID = item.distributorID;
    retailerID = item.retailerID;
    consumerID = item.consumerID;

    return
    (
      itemSKU,
      itemUPC,
      productID,
      productNotes,
      productPrice,
      itemState,
      distributorID,
      retailerID,
      consumerID
    );
  }
}
